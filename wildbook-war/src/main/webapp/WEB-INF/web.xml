<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
  ~ The Shepherd Project - A Mark-Recapture Framework
  ~ Copyright (C) 2011 Jason Holmberg
  ~
  ~ This program is free software; you can redistribute it and/or
  ~ modify it under the terms of the GNU General Public License
  ~ as published by the Free Software Foundation; either version 2
  ~ of the License, or (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program; if not, write to the Free Software
  ~ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
  -->
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
                             http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0"
         metadata-complete="true">

    <display-name>Shepherd Project Framework for Mark-Recapture Studies</display-name>
    <description>
        Photo-identification Library
    </description>
    <filter>
        <filter-name>ShiroFilter</filter-name>
        <filter-class>org.apache.shiro.web.servlet.IniShiroFilter</filter-class>
        <init-param>
            <param-name>config</param-name>
            <param-value>
                #See Shiro API http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/servlet/IniShiroFilter.html
                
                #create an object of the RoleSecurityJdbcRealm
                #IniShiroFilter will inject that object into the SecurityManager
                [main]
                realmA = org.ecocean.security.ShepherdRealm
                roles.unauthorizedUrl = /accessDenied.jsp 
                authcBasicWildbook = org.ecocean.security.WildbookBasicHttpAuthenticationFilter
                
                #this application will use all the default
                #filters (see link above)
                #for example the default login page is /login.jsp
                #users who try to access a page protected by Shiro
                #will be sent to /login.jsp
                [filters]


                #only let authenticated users
                #with the appropriate role
                #view the web pages in the secure
                #and admin areas
                [urls]
                
                /welcome.jsp = authc
                /admin.jsp = authc, roles[admin]
            </param-value>
        </init-param>
    </filter>
    
    <filter-mapping>
        <filter-name>ShiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>ShiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>CorsFilter</filter-name>
        <filter-class>org.apache.catalina.filters.CorsFilter</filter-class>
        <init-param>
            <param-name>cors.allowed.origins</param-name>
            <param-value>*</param-value>
        </init-param>
        <init-param>
            <param-name>cors.allowed.methods</param-name>
            <param-value>GET,POST,HEAD,OPTIONS,PUT</param-value>
        </init-param>
        <init-param>
            <param-name>cors.allowed.headers</param-name>
            <param-value>content-disposition,Content-Type,X-Requested-With,accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers,Last-Modified</param-value>
        </init-param>
        <init-param>
            <param-name>cors.exposed.headers</param-name>
            <param-value>Access-Control-Allow-Origin,Access-Control-Allow-Credentials</param-value>
        </init-param>
        <init-param>
            <param-name>cors.support.credentials</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>CorsFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <servlet>
        <description>Log in user using username and password provided</description>
        <display-name>LoginUser</display-name>
        <servlet-name>LoginUser</servlet-name>
        <servlet-class> org.ecocean.servlet.LoginUser</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>LoginUser</servlet-name>
        <url-pattern>/LoginUser</url-pattern>
    </servlet-mapping>

   <servlet>
          <description>
          Logs user out</description>
          <display-name>
          LogoutUser</display-name>
          <servlet-name>LogoutUser</servlet-name>
          <servlet-class>
          org.ecocean.servlet.LogoutUser</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>LogoutUser</servlet-name>
        <url-pattern>/LogoutUser</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

  <!--
  <servlet>
    <servlet-name>mediaupload</servlet-name>
    <servlet-class>org.ecocean.rest.MediaUploadServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>mediaupload</servlet-name>
    <url-pattern>/mediaupload</url-pattern>
  </servlet-mapping> -->

</web-app>
